#!/bin/bash
# @package exadra37-docker/sublime-text-3
# @link    https://gitlab.com/u/exadra37-docker/sublime-text-3
# @since   2017/02/05
# @license MIT
# @author  Exadra37(Paulo Silva) <exadra37ingmailpointcom>
#
# Social Links:
# @link    Auhthor:  https://exadra37.com
# @link    Github:   https://github.com/Exadra37
# @link    Linkedin: https://uk.linkedin.com/in/exadra37
# @link    Twitter:  https://twitter.com/Exadra37

set -e

########################################################################################################################
# Functions
########################################################################################################################

    function Create_Folder_If_Not_Exists()
    {
        local folder="${1}"

        mkdir -p "${folder}"
    }

    function Is_Not_Present_Docker_Image()
    {
        local image_name="${1}"

        [ -z $( sudo docker images -q "${image_name}" ) ] && return 0 || return 1
    }

    function Build_Local_Docker_Image()
    {
        local image_name="${1}"

        local sublime_build="${2}"

        local script_path="${3}"

        local uid=$( id -u )

        local gid=$( id -g )

        sudo docker build \
                    --build-arg CONTAINER_USER="${USER}" \
                    --build-arg CONTAINER_UID="${uid}" \
                    --build-arg SUBLIME_BUILD="${sublime_build}" \
                    -t "${image_name}:latest" \
                    "${script_path}"/../build
    }

    function Remove_Docker_Image()
    {
        local image_name="${1}"

        sudo docker rmi "${image_name}"
    }

    function Pull_Docker_Image()
    {
        local image_name="${1}"

        sudo docker pull "${image_name}"
    }

    function Perform_Docker_Image_Action()
    {
        local image_action="${1}"

        local image_name="${2}"

        local sublime_build="${3}"

        local script_path="${4}"

        # We may want to use this action to:
        #   - force an update of Ubuntu to keep security up to date.
        #   - reflect last changes in the Dockerfile .
        if [ "rebuild-local-image" == "${image_action}" ]
            then
                Remove_Docker_Image "${image_name}"
        fi

        # Keeps our Docker Image from Docker Hub updated to benefit from:
        #   - security updates
        #   - last changes on Dockerfile
        if [ "pull-from-docker-hub" == "${image_action}" ]
            then
                Pull_Docker_Image "${image_name}"
        fi

        if [ "pull-from-docker-hub" != "${image_action}" ] && Is_Not_Present_Docker_Image "${image_name}"
            then
                Build_Local_Docker_Image "${image_name}" "${sublime_build}" "${script_path}"
        fi
    }

    function Print_Text_With_Label()
    {
        local _label_text="${1}"

        local _text="${2}"

        local _label_background_color="${3:-42}"

        local _text_background_color="${4:-229}"

        printf "\n\e[1;${_label_background_color}m ${_label_text}:\e[30;48;5;${_text_background_color}m ${_text} \e[0m \n"
    }

    function Print_Text()
    {
        local _text="${1}"

        local _text_color="${2:-44}"

        printf "\n\e[1;${_text_color}m ${_text} \e[0m \n"
    }


########################################################################################################################
# Variables Defaults
########################################################################################################################

    SCRIPT_PATH=$(dirname $(readlink -f $0))

    TIMESTAMP=$( date +"%s" )

    IMAGE_NAME="exadra37/sublime-text-3"

    IMAGE_ACTION="pull-from-docker-hub"

    CONTAINER_USER="sublime"

    CONTAINER_NAME="ST3_${TIMESTAMP}"

    # The base Dir to persist Sublime profiles with their associated settings, cache and installed packages.
    HOST_SUBLIME_DIR=/home/"${USER}"/.dockerize/sublime-text-3

    HOST_WORKSPACE="${PWD}"

    SUBLIME_BUILD="3126"

    PROFILE="basic"


########################################################################################################################
# Arguments
########################################################################################################################

    while getopts ':b:i:lp:rw:h' flag; do
      case "${flag}" in
        b) SUBLIME_BUILD="${OPTARG}"; IMAGE_ACTION="rebuild"; CONTAINER_USER="${USER}"; ;;
        i) IMAGE_NAME="${OPTARG}"; IMAGE_ACTION="pull"; CONTAINER_USER="sublime"; ;;
        l) IMAGE_NAME="exadra37/st3-local"; IMAGE_ACTION=""; CONTAINER_USER="${USER}"; ;;
        p) PROFILE="${OPTARG}" ;;
        r) IMAGE_ACTION="rebuild-local-image"; IMAGE_NAME="exadra37/st3-local"; CONTAINER_USER="${USER}"; ;;
        w) HOST_WORKSPACE="${OPTARG}" ;;
        h) cat "${SCRIPT_PATH}"/../docs/help.txt; exit 0; ;;
        \?) Print_Text_With_Label "ERROR" "option -${OPTARG} is not supported." 41; exit 1 ;;
        :) Print_Text_With_Label "ERROR" "option -${OPTARG} requires a value."; exit 1 ;;
      esac
    done


########################################################################################################################
# Assignments
########################################################################################################################

    HOST_SUBLIME_DIR="${HOST_SUBLIME_DIR}/profiles/${PROFILE}"
    CONTAINER_DIR="${HOST_WORKSPACE#*${USER}/}"
    CONTAINER_WORKSPACE="/home/${CONTAINER_USER}/${CONTAINER_DIR}"
    WORKSPACE_DIR="${CONTAINER_DIR//\//_}"

    INSTALL_PACKAGES_DIR=".config/sublime-text-3/Installed Packages"
    PACKAGES_DIR=".config/sublime-text-3/Packages"
    LOCAL_DIR=".config/sublime-text-3/Local"
    INDEX_DIR=".config/sublime-text-3/Index"
    CACHE_DIR=".config/sublime-text-3/Cache"

    SUBLIME_INSTALL_PACKAGES_DIR="${HOST_SUBLIME_DIR}/${INSTALL_PACKAGES_DIR}"
    SUBLIME_PACKAGES_DIR="${HOST_SUBLIME_DIR}/${PACKAGES_DIR}"
    SUBLIME_LOCAL_DIR="${HOST_SUBLIME_DIR}/.workspace/${WORKSPACE_DIR}/${LOCAL_DIR}"
    SUBLIME_INDEX_DIR="${HOST_SUBLIME_DIR}/.workspace/${WORKSPACE_DIR}/${INDEX_DIR}"
    SUBLIME_CACHE_DIR="${HOST_SUBLIME_DIR}/.workspace/${WORKSPACE_DIR}/${CACHE_DIR}"


########################################################################################################################
# Validations
########################################################################################################################

    Create_Folder_If_Not_Exists "${HOST_SUBLIME_DIR}"
    Create_Folder_If_Not_Exists "${SUBLIME_INSTALL_PACKAGES_DIR}"
    Create_Folder_If_Not_Exists "${SUBLIME_PACKAGES_DIR}"
    Create_Folder_If_Not_Exists "${SUBLIME_LOCAL_DIR}"
    Create_Folder_If_Not_Exists "${SUBLIME_INDEX_DIR}"
    Create_Folder_If_Not_Exists "${SUBLIME_CACHE_DIR}"


########################################################################################################################
# Execution
########################################################################################################################

    Perform_Docker_Image_Action "${IMAGE_ACTION}" "${IMAGE_NAME}" "${SUBLIME_BUILD}" "${SCRIPT_PATH}"

    # Setup X11 server authentication
    # @link http://wiki.ros.org/docker/Tutorials/GUI#The_isolated_way
    XSOCK=/tmp/.X11-unix
    XAUTH="${HOST_SUBLIME_DIR}"/.docker.xauth
    touch "${XAUTH}"
    xauth nlist "${DISPLAY}" | sed -e 's/^..../ffff/' | xauth -f "${XAUTH}" nmerge -

    Print_Text_With_Label "WORKSPACE MAP" "${HOST_WORKSPACE}:${CONTAINER_WORKSPACE}" 40

    Print_Text_With_Label "Using Docker Image" "${IMAGE_NAME}" 44

    Print_Text_With_Label "Shell into Container" "sudo docker exec -it ${CONTAINER_NAME} zsh"

    # Run Container with X11 authentication and using same user in container and host
    # @link http://wiki.ros.org/docker/Tutorials/GUI#The_isolated_way
    #
    # Additional to the above tutorial:
    #   * I set the container --workdir in the host to persist Sublime settings and cache across restarts
    #   * I Also map my developer folder in the host to the container.
    #   * XSOCK and XAUTH only have ready access to the Host, instead of ready and write.
    #        --workdir="${CONTAINER_WORKSPACE}" \
    sudo docker run --rm -it \
        --name="${CONTAINER_NAME}" \
        --workdir="${CONTAINER_WORKSPACE}" \
        --volume="${HOST_WORKSPACE}":"${CONTAINER_WORKSPACE}" \
        --volume="${SUBLIME_LOCAL_DIR}":"/home/${CONTAINER_USER}/${LOCAL_DIR}" \
        --volume="${SUBLIME_INDEX_DIR}":"/home/${CONTAINER_USER}/${INDEX_DIR}" \
        --volume="${SUBLIME_CACHE_DIR}":"/home/${CONTAINER_USER}/${CACHE_DIR}" \
        --volume="${SUBLIME_PACKAGES_DIR}":"/home/${CONTAINER_USER}/${PACKAGES_DIR}" \
        --volume="${SUBLIME_INSTALL_PACKAGES_DIR}":"/home/${CONTAINER_USER}/${INSTALL_PACKAGES_DIR}" \
        --volume="${XSOCK}":"${XSOCK}":ro \
        --volume="${XAUTH}":"${XAUTH}":ro \
        --env="XAUTHORITY=${XAUTH}" \
        --env="DISPLAY" \
        --user=1000 \
        "${IMAGE_NAME}"
